---
// Simple container for AccordionItem components
---

<div class="accordion w-full overflow-hidden">
  <slot />
</div>

<script>
  document.addEventListener('astro:page-load', setupAccordion);
  
  function setupAccordion() {
    const accordions = document.querySelectorAll('.accordion');
    
    // Process each accordion separately
    accordions.forEach(accordion => {
      const accordionHeaders = accordion.querySelectorAll('.accordion-header');
      const accordionItems = accordion.querySelectorAll('.accordion-item');
      
      // Open the first item by default if none are open in this accordion
      if (accordionItems.length > 0) {
        const openItems = Array.from(accordionItems).filter(item => 
          item.querySelector('.accordion-content').style.display !== 'none');
        
        if (openItems.length === 0) {
          const firstItem = accordionItems[0];
          const firstContent = firstItem.querySelector('.accordion-content');
          const firstIcon = firstItem.querySelector('.accordion-icon');
          const firstHeader = firstItem.querySelector('.accordion-header');
          const color = firstItem.dataset.color;
          
          firstContent.style.display = 'block';
          firstIcon.textContent = '-';
          firstHeader.style.backgroundColor = 'white';
          firstHeader.style.color = color;
        }
      }
      
      // Setup click handlers for each header in this accordion
      accordionHeaders.forEach(header => {
        header.addEventListener('click', function() {
          const item = this.closest('.accordion-item');
          const content = item.querySelector('.accordion-content');
          const icon = this.querySelector('.accordion-icon');
          const isOpen = content.style.display !== 'none';
          
          // Get the color from data attribute
          const color = item.dataset.color;
          
          // Toggle current item
          if (isOpen) {
            // Only close if there's another item open in the same accordion
            const openItems = Array.from(accordionItems).filter(accItem => 
              accItem !== item && 
              accItem.querySelector('.accordion-content').style.display === 'block');
            
            if (openItems.length > 0) {
              // Safe to close this item
              content.style.display = 'none';
              icon.textContent = '+';
              
              // Change color (closed state: colored bg, white text)
              this.style.backgroundColor = color;
              this.style.color = 'white';
            }
          } else {
            // First close all other open items in the same accordion
            accordionItems.forEach(accItem => {
              if (accItem !== item) {
                const accContent = accItem.querySelector('.accordion-content');
                const accIcon = accItem.querySelector('.accordion-icon');
                const accHeader = accItem.querySelector('.accordion-header');
                const accColor = accItem.dataset.color;
                
                // Close this item
                accContent.style.display = 'none';
                accIcon.textContent = '+';
                
                // Change color (closed state: colored bg, white text)
                accHeader.style.backgroundColor = accColor;
                accHeader.style.color = 'white';
              }
            });
            
            // Then open this item
            content.style.display = 'block';
            icon.textContent = '-';
            
            // Change color (open state: white bg, colored text)
            this.style.backgroundColor = 'white';
            this.style.color = color;
          }
        });
      });
    });
  }
  
  // Run on initial page load
  if (document.readyState === 'complete') {
    setupAccordion();
  } else {
    document.addEventListener('DOMContentLoaded', setupAccordion);
  }
</script> 